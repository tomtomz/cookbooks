{"name":"stunnel","version":"3.1.0","description":"Provides resources to help install and configure stunnel","long_description":"# stunnel\n\n[![Build Status](https://travis-ci.org/dnsimple/chef-stunnel.svg?branch=master)](https://travis-ci.org/dnsimple/chef-stunnel)\n\nChef cookbook to install and configure stunnel\n\n## Requirements\n\n* Chef 12.6+\n\n## Platform Support\n\n* Ubuntu 14.04+\n* CentOS 6.9+\n\n## Resources\n\nAn `stunnel_connection` resource is provided for defining stunnel connections. As a client:\n```ruby\ninclude_recipe 'stunnel'\n\nstunnel_connection 'random_service' do\n  connect \"#{rnd_srv_node['ipaddress']}:#{rnd_srv_node['random_service']['port']}\"\n  accept node['random_service']['local_accept_port']\n  notifies :restart, 'service[stunnel]'\nend\n```\n\nAs a server:\n```ruby\ninclude_recipe 'stunnel::server'\n\nstunnel_connection 'random_service' do\n  accept node['random_service']['tunnel_port']\n  connect node['random_service']['port']\n  notifies :restart, 'service[stunnel]'\nend\n```\n\n## Attributes\n\nLots of configurable attributes:\n\n```ruby\ndefault['stunnel']['install_method'] = 'package'  # the other valid option is 'source'\n\ndefault['stunnel']['packages'] = %w(stunnel4)\ndefault['stunnel']['service_name'] = 'stunnel4'\n\ndefault['stunnel']['ssl_dir'] = '/etc/ssl'\ndefault['stunnel']['server_ssl_req']  = \"/C=US/ST=Several/L=Locality/O=Example/OU=Operations/CN=#{node['fqdn']}/emailAddress=root@#{node['fqdn']}\"\ndefault['stunnel']['cert_fqdn'] = node['fqdn']\n\ndefault['stunnel']['use_chroot'] = false\ndefault['stunnel']['chroot_path'] = \"/usr/var/lib/stunnel\"\ndefault['stunnel']['pidfile'] = \"/tmp/stunnel.pid\"\ndefault['stunnel']['user'] = \"root\"\ndefault['stunnel']['group'] = \"root\"\ndefault['stunnel']['ulimit'] = nil # set to a number to add ulimit setting to init script\n\ndefault['stunnel']['https']['enabled'] = false\ndefault['stunnel']['https']['accept_port'] = \"443\"\ndefault['stunnel']['https']['connect_port'] = \"81\"\n\ndefault['stunnel']['client_mode'] = true\n\ndefault['stunnel']['fips'] = nil\ndefault['stunnel']['ssl_version'] = 'all'\ndefault['stunnel']['ssl_options'] = 'NO_SSLv2'\ndefault['stunnel']['socket_tunings'] = %w(l:TCP_NODELAY=1 r:TCP_NODELAY=1)\ndefault['stunnel']['compression'] = nil # zlib\ndefault['stunnel']['debug'] = nil # 3\ndefault['stunnel']['output'] = '/var/log/stunnel.log'\n\n# key value pair mapping for default var file\ndefault['stunnel']['default']['enabled'] = 1\ndefault['stunnel']['default']['files'] = '/etc/stunnel/*.conf'\ndefault['stunnel']['default']['options'] = ''\n```\n\n### FIPS\n\nFIPS mode can be enabled or disabled with the attribute `['stunnel']['fips']`. A value of nil will omit the\n\"fips\" setting from the config file altogether, falling back to the default behavior for that version of stunnel:\n\n- For 4.x releases FIPS defaults to on if stunnel was compiled with FIPS support.\n- For 5.x releases FIPS defaults to off.\n\n\n## ChefSpec Matchers\n\nA set of ChefSpec matchers is included for unit testing with ChefSpec. These\nare automatically available when you make this cookbook a dependency in your\ncookbook's metadata. To illustrate:\n\nRecipe code:\n\n```ruby\nstunnel_connection 'haproxy_ssl' do\n  accept    '443'\n  connect   '8443'\nend\n```\n\nAnd the matching spec:\n\n```ruby\nit 'should create stunnel_connection haproxy_ssl' do\n  expect(chef_run).to create_stunnel_connection('haproxy_ssl').with(\n    accept:  '443',\n    connect: '8443'\n  )\nend\n```\n\nYou can also make assertions for notifying other resources:\n\n```ruby\nit 'should notify stunnel to restart on changes to stunnel_connection[haproxy_ssl]' do\n  resource = chef_run.stunnel_connection('haproxy_ssl')\n  expect(resource).to notify('service[stunnel]').to(:restart)\nend\n```\n\nA matcher for the delete action is also available:\n\n```ruby\nit 'should delete stunnel_connection haproxy_ssl' do\n  expect(chef_run).to delete_stunnel_connection('haproxy_ssl')\nend\n```\n\n## Testing Locally\n\nTo run the tests, make sure you've got the latest [ChefDK](https://downloads.chef.io/chef-dk/) along with\n[Vagrant](https://www.vagrantup.com/downloads.html) then you can run `chef exec kitchen test` which will run the\nentire test suite on all platforms.\n\n## License and Authors\n\n* Author:: [Aaron Kalin](https://github.com/martinisoft)\n\nCopyright:: 2016-2017 Aetrion, LLC dba DNSimple\n\n```\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n","maintainer":"Aetrion, LLC dba DNSimple","maintainer_email":"ops@dnsimple.com","license":"Apache-2.0","platforms":{"ubuntu":">= 0.0.0","centos":">= 0.0.0"},"dependencies":{"build-essential":">= 0.0.0"},"recommendations":{},"suggestions":{},"conflicting":{},"providing":{},"replacing":{},"attributes":{},"groupings":{},"recipes":{},"source_url":"https://github.com/aetrion/chef-stunnel","issues_url":"https://github.com/aetrion/chef-stunnel/issues","chef_version":[[">= 12.6"]],"ohai_version":[]}