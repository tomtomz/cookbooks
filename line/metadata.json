{
  "name": "line",
  "description": "Provides line editing resources for use by recipes",
  "long_description": "# line cookbook\n\n[![Build Status](https://www.travis-ci.org/sous-chefs/line-cookbook.svg?branch=master)](https://www.travis-ci.org/sous-chefs/line-cookbook)\n\n# Motivation\n\nQuite often, the need arises to do line editing instead of managing an entire file with a template resource. This cookbook supplies various resources that will help you do this.\n\n# Limitations\n\n- The line resources processes the entire target file in memory. Trying to edit large files may fail.\n- The end of line processing was only tested using`\\n` and `\\r\\n`. Using other line endings very well may not work.\n- The end of line string used needs to match the actual end of line used in the file `\\n` and `\\r\\n` are used as the defaults but if they don't match the actual end of line used in the file the results will be weird.\n- Adding a line implies there is a separator on the previous line. Adding a line differs from appending characters.\n- Missing file processing is the way it is by intention\n\n  - `add_to_list` do nothing, list not found so there is nothing to add to.\n  - `append_if_no_line` create file, add the line.\n  - `delete_from_list` do nothing, the list was not found which implies there is nothing to delete\n  - `delete_lines` do nothing, the line isn't there which implies there is nothing to delete\n  - `replace_or_add` create file, add the line\n- Chef client version 13 or greater is expected. Some limited testing on Chef client 12 has been done and the cookbook seems to work. PRs for chef 12 support will be considered.\n\n# Usage\n\nAdd \"depends 'line'\" to your cookbook's metadata.rb to gain access to the resoures.\n\n```ruby\nappend_if_no_line \"make sure a line is in some file\" do\n  path \"/some/file\"\n  line \"HI THERE I AM STRING\"\nend\n\nreplace_or_add \"why hello\" do\n  path \"/some/file\"\n  pattern \"Why hello there.*\"\n  line \"Why hello there, you beautiful person, you.\"\nend\n\ndelete_lines \"remove hash-comments from /some/file\" do\n  path \"/some/file\"\n  pattern \"^#.*\"\nend\n\ndelete_lines \"remove hash-comments from /some/file with a regexp\" do\n  path \"/some/file\"\n  pattern /^#.*/\nend\n\nreplace_or_add \"change the love, don't add more\" do\n  path \"/some/file\"\n  pattern \"Why hello there.*\"\n  line \"Why hello there, you beautiful person, you.\"\n  replace_only true\nend\n\nadd_to_list \"add entry to a list\" do\n  path \"/some/file\"\n  pattern \"People to call: \"\n  delim [\",\"]\n  entry \"Bobby\"\nend\n\ndelete_from_list \"delete entry from a list\" do\n  path \"/some/file\"\n  pattern \"People to call: \"\n  delim [\",\"]\n  entry \"Bobby\"\nend\n\ndelete_lines 'remove from nonexisting' do\n  path '/tmp/doesnotexist'\n  pattern /^#/\n  ignore_missing true\nend\n```\n\n# Resource Notes\n\nSo far, the only resources implemented are\n\n```ruby\nappend_if_no_line\nreplace_or_add\ndelete_lines\nadd_to_list\ndelete_from_list\n```\n\n## Resource: append_if_no_line\n\n### Actions\n\nAction | Description\n------ | -------------------------------\nedit   | Append a line if it is missing.\n\n### Properties\n\nProperties     | Description                       | Type          | Values and Default\n-------------- | --------------------------------- | ------------- | ---------------------------------------\npath           | File to update                    | String        | Required, no default\nline           | Line contents                     | String        | Required, no default\nignore_missing | Don't fail if the file is missing | true or false | Default is true\neol            | Alternate line end characters     | String        | default `\\n` on unix, `\\r\\n` on windows\nbackup         | Backup before changing            | Boolean       | default false\n\n### Notes\n\nThis resource is intended to match the whole line **exactly**. That means if the file contains `this is my line` (trailing whitespace) and you've specified `line \"this is my line\"`, another line will be added. You may want to use `replace_or_add` instead, depending on your use case.\n\n## Resource: replace_or_add\n\n### Actions\n\nAction | Description\n------ | -----------------------------------------------------------------------------------------------\nedit   | Replace lines that match the pattern. Append the line unless a source line matches the pattern.\n\n### Properties\n\nProperties     | Description                              | Type                         | Values and Default\n-------------- | ---------------------------------------- | ---------------------------- | ---------------------------------------\npath           | File to update                           | String                       | Required, no default\npattern        | Regular expression to select lines       | Regular expression or String | Required, no default\nline           | Line contents                            | String                       | Required, no default\nreplace_only   | Don't append only replace matching lines | true or false                | Required, no default\nignore_missing | Don't fail if the file is missing        | true or false                | Default is true\neol            | Alternate line end characters            | String                       | default `\\n` on unix, `\\r\\n` on windows\nbackup         | Backup before changing                   | Boolean                      | default false\n\n## Resource: delete_lines\n\n### Actions\n\nAction | Description\n------ | ------------------------------------\nedit   | Delete lines that match the pattern.\n\n### Properties\n\nProperties     | Description                        | Type                         | Values and Default\n-------------- | ---------------------------------- | ---------------------------- | ---------------------------------------\npath           | File to update                     | String                       | Required, no default\npattern        | Regular expression to select lines | Regular expression or String | Required, no default\nignore_missing | Don't fail if the file is missing  | true or false                | Default is true\neol            | Alternate line end characters      | String                       | default `\\n` on unix, `\\r\\n` on windows\nbackup         | Backup before changing             | Boolean                      | default false\n\n### Notes\n\nRemoves lines based on a string or regex.\n\n## Resource: add_to_list\n\n### Actions\n\nAction | Description\n------ | ---------------------\nedit   | Add an item to a list\n\n### Properties\n\nProperties     | Description                        | Type                         | Values and Default\n-------------- | ---------------------------------- | ---------------------------- | -------------------------------------------\npath           | File to update                     | String                       | Required, no default\npattern        | Regular expression to select lines | Regular expression or String | Required, no default\ndelim          | Delimiter entries                  | Array                        | Array of 1, 2 or 3 multi-character elements\nentry          | Value to add                       | String                       | Required, No default\nends_with      | List ending                        | String                       | No default\nignore_missing | Don't fail if the file is missing  | true or false                | Default is true\neol            | Alternate line end characters      | String                       | default `\\n` on unix, `\\r\\n` on windows\nbackup         | Backup before changing             | Boolean                      | default false\n\n### Notes\n\nIf one delimiter is given, it is assumed that either the delimiter or the given search pattern will proceed each entry and each entry will be followed by either the delimiter or a new line character: People to call: Joe, Bobby delim [\",\"] entry 'Karen' People to call: Joe, Bobby, Karen\n\nIf two delimiters are given, the first is used as the list element delimiter and the second as entry delimiters: my @net1918 = (\"10.0.0.0/8\", \"172.16.0.0/12\"); delim [\", \", \"\\\"\"] entry \"192.168.0.0/16\" my @net1918 = (\"10.0.0.0/8\", \"172.16.0.0/12\", \"192.168.0.0/16\");\n\nif three delimiters are given, the first is used as the list element delimiter, the second as the leading entry delimiter and the third as the trailing delimiter: multi = ([310], [818]) delim [\", \", \"[\", \"]\"] entry \"425\" multi = ([310], [818], [425])\n\nend_with is an optional property. If specified a list is expected to end with the given string.\n\n## Resource: delete_from_list\n\n### Actions\n\nAction | Description\n------ | --------------------------\nedit   | Delete an item from a list\n\n### Properties\n\nProperties     | Description                        | Type                         | Values and Default\n-------------- | ---------------------------------- | ---------------------------- | -------------------------------------------\npath           | File to update                     | String                       | Required, no default\npattern        | Regular expression to select lines | Regular expression or String | Required, no default\ndelim          | Delimiter entries                  | Array                        | Array of 1, 2 or 3 multi-character elements\nentry          | Value to delete                    | String                       | Required, No default\nends_with      | List ending                        | String                       | No default\nignore_missing | Don't fail if the file is missing  | true or false                | Default is true\neol            | Alternate line end characters      | String                       | default `\\n` on unix, `\\r\\n` on windows\nbackup         | Backup before changing             | Boolean                      | default false\n\n### Notes\n\nDelimiters works exactly the same way as `add_to_list`, see above.\n\n# Author\n\n- Contributor: Mark Gibbons\n- Contributor: Dan Webb\n- Contributor: Sean OMeara\n- Contributor: Antek S. Baranski\n",
  "maintainer": "Sous Chefs",
  "maintainer_email": "help@sous-chefs.org",
  "license": "Apache-2.0",
  "platforms": {
    "debian": ">= 0.0.0",
    "ubuntu": ">= 0.0.0",
    "centos": ">= 0.0.0",
    "redhat": ">= 0.0.0",
    "scientific": ">= 0.0.0",
    "oracle": ">= 0.0.0",
    "amazon": ">= 0.0.0",
    "windows": ">= 0.0.0"
  },
  "dependencies": {

  },
  "providing": {

  },
  "attributes": {

  },
  "recipes": {

  },
  "version": "2.0.1",
  "source_url": "https://github.com/sous-chefs/line-cookbook",
  "issues_url": "https://github.com/sous-chefs/line-cookbook/issues",
  "privacy": false,
  "chef_versions": [
    [
      ">= 12.13.37"
    ]
  ],
  "ohai_versions": [

  ],
  "gems": [

  ]
}
